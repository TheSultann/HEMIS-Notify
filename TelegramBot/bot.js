// TelegramBot/bot.js

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cron = require('node-cron');

function startBot() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const apiUrl = process.env.MINI_HEMIS_API_URL;
    const botApiSecret = process.env.BOT_API_SECRET;

    if (!token || !apiUrl || !botApiSecret) {
        console.error('–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        process.exit(1);
    }

    const bot = new TelegramBot(token, { polling: true });
    console.log('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
    bot.setMyCommands([
        { command: '/start', description: 'üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: '/schedule_today', description: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
        { command: '/schedule_tomorrow', description: 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' },
        { command: '/login', description: 'üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç HEMIS' },
        { command: '/help', description: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }
    ]);

    const userStates = {};

    // --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function formatSchedule(schedule, title, role, dateObject) {
        const formattedDate = dateObject.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long'
        });
        if (!schedule || schedule.length === 0) {
            return `<b>${title} (${formattedDate}):</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ`;
        }
        schedule.sort((a, b) => a.time.localeCompare(b.time));
        let message = `<b>${title} (${formattedDate}):</b>\n\n`;
        schedule.forEach(item => {
            message += `üïí <b>${item.time}</b>\n`;
            message += `üìö ${item.subjectId.name}\n`;
            if (item.subjectId.lessonType) message += `üè∑Ô∏è ${item.subjectId.lessonType}\n`;
            if (role === 'teacher') message += `üë• ${item.subjectId.groupName}\n`;
            else message += `üë§ ${item.subjectId.teacherName}\n`;
            message += `üö™ ${item.subjectId.auditoriumName}\n`;
            message += `--------------------\n`;
        });
        return message;
    }

    async function processAndSendSchedule(dateObject, title) {
        console.log(`[${new Date().toLocaleString()}] –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: "${title}"`);
        try {
            const { data: subscribers } = await axios.get(`${apiUrl}/api/bot/subscribers`, {
                headers: { 'x-bot-secret': botApiSecret }
            });
            if (subscribers.length === 0) {
                console.log("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
                return;
            }
            console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribers.length}`);
            for (const subscriber of subscribers) {
                try {
                    const { data: scheduleData } = await axios.get(`${apiUrl}/api/bot/schedule/${subscriber.telegramChatId}`, {
                        headers: { 'x-bot-secret': botApiSecret }
                    });
                    const daySchedule = scheduleData.schedule.filter(item => {
                        const lessonDate = new Date(item.lesson_date * 1000);
                        return lessonDate.getFullYear() === dateObject.getFullYear() &&
                               lessonDate.getMonth() === dateObject.getMonth() &&
                               lessonDate.getDate() === dateObject.getDate();
                    });
                    const message = formatSchedule(daySchedule, title, subscriber.role, dateObject);
                    await bot.sendMessage(subscriber.telegramChatId, message, { parse_mode: 'HTML' });
                    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${title}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.telegramChatId}`);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscriber.telegramChatId}:`, error.response?.data?.message || error.message);
                }
            }
            console.log(`–†–∞—Å—Å—ã–ª–∫–∞ "${title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
        } catch (error) {
            console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ "${title}":`, error.message);
        }
    }

    async function processAndSendScheduleForUser(chatId, dateObject, title) {
        try {
            const { data: scheduleData } = await axios.get(`${apiUrl}/api/bot/schedule/${chatId}`, {
                headers: { 'x-bot-secret': botApiSecret }
            });
            const daySchedule = scheduleData.schedule.filter(item => {
                const lessonDate = new Date(item.lesson_date * 1000);
                return lessonDate.getFullYear() === dateObject.getFullYear() &&
                       lessonDate.getMonth() === dateObject.getMonth() &&
                       lessonDate.getDate() === dateObject.getDate();
            });
            const message = formatSchedule(daySchedule, title, scheduleData.role, dateObject);
            await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è ${chatId}:`, error.message);
            bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.");
        }
    }

    // --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ Cron (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    cron.schedule('0 7 * * *', () => processAndSendSchedule(new Date(), "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), { scheduled: true, timezone: "Asia/Tashkent" });
    console.log('–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 7:00.');
    cron.schedule('0 19 * * *', () => {
        const today = new Date();
        if (today.getDay() === 6) {
            console.log("–°–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –≤–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
            return;
        }
        const tomorrowDate = new Date();
        tomorrowDate.setDate(tomorrowDate.getDate() + 1);
        processAndSendSchedule(tomorrowDate, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞");
    }, { scheduled: true, timezone: "Asia/Tashkent" });
    console.log('–í–µ—á–µ—Ä–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 19:00.');

    // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
    bot.on('callback_query', (callbackQuery) => {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        bot.answerCallbackQuery(callbackQuery.id); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

        if (data === 'link_account') {
            userStates[msg.chat.id] = { state: 'awaiting_hemis_login' };
            bot.sendMessage(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã HEMIS (–æ–±—ã—á–Ω–æ —ç—Ç–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞):");
        }
        if (data === 'schedule_today') {
            bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...");
            processAndSendScheduleForUser(msg.chat.id, new Date(), "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
        }
        if (data === 'schedule_tomorrow') {
            bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...");
            const tomorrowDate = new Date();
            tomorrowDate.setDate(tomorrowDate.getDate() + 1);
            processAndSendScheduleForUser(msg.chat.id, tomorrowDate, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞");
        }
    });

    // --- –ò–ó–ú–ï–ù–ï–ù–û: "–£–º–Ω–∞—è" –∫–æ–º–∞–Ω–¥–∞ /start ---
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        delete userStates[chatId];

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const response = await axios.get(`${apiUrl}/api/bot/schedule/${chatId}`, {
                headers: { 'x-bot-secret': botApiSecret }
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (–∫–æ–¥ 200)
            const userName = response.data.schedule[0]?.subjectId?.studentName || "—Å—Ç—É–¥–µ–Ω—Ç"; // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
            bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'schedule_today' }],
                        [{ text: 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data: 'schedule_tomorrow' }],
                        [{ text: 'üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç HEMIS', callback_data: 'link_account' }]
                    ]
                }
            });

        } catch (error) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ 404)
            if (error.response && error.response.status === 404) {
                const welcomeMessage = `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini-HEMIS –±–æ—Ç!</b>\n\n–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.`;
                bot.sendMessage(chatId, welcomeMessage, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç HEMIS', callback_data: 'link_account' }]
                        ]
                    }
                });
            } else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                console.error("–û—à–∏–±–∫–∞ –≤ /start:", error.message);
                bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /login —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    bot.onText(/\/login/, (msg) => {
        const chatId = msg.chat.id;
        userStates[chatId] = { state: 'awaiting_hemis_login' };
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã HEMIS:");
    });

    bot.onText(/\/help/, (msg) => {
        const helpMessage = `<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã HEMIS.\n\n- –£—Ç—Ä–æ–º (–≤ 11:00) –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n- –í–µ—á–µ—Ä–æ–º (–≤ 19:00) - –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (–∑–Ω–∞—á–æ–∫ "/") –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.`;
        bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'HTML' });
    });

    // –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –º–µ–Ω—é
    bot.onText(/\/schedule_today/, (msg) => {
        bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...");
        processAndSendScheduleForUser(msg.chat.id, new Date(), "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
    });

    bot.onText(/\/schedule_tomorrow/, (msg) => {
        bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...");
        const tomorrowDate = new Date();
        tomorrowDate.setDate(tomorrowDate.getDate() + 1);
        processAndSendScheduleForUser(msg.chat.id, tomorrowDate, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞");
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;
        if (text.startsWith('/')) return;
        const currentState = userStates[chatId];
        if (!currentState) return;

        if (currentState.state === 'awaiting_hemis_login') {
            currentState.hemisLogin = text;
            currentState.state = 'awaiting_hemis_password';
            bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç HEMIS. \n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.");
        } else if (currentState.state === 'awaiting_hemis_password') {
            const { hemisLogin } = currentState;
            const hemisPassword = text;
            delete userStates[chatId];
            bot.deleteMessage(chatId, msg.message_id).catch(err => console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."));
            bot.sendMessage(chatId, "–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –≤ HEMIS, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...");

            try {
                const response = await axios.post(`${apiUrl}/api/bot/register`, {
                    hemisLogin,
                    hemisPassword,
                    chatId: chatId.toString()
                }, { headers: { 'x-bot-secret': botApiSecret } });

                if (response.data.success) {
                    bot.sendMessage(chatId, `‚úÖ ${response.data.message}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'schedule_today' }],
                                [{ text: 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data: 'schedule_tomorrow' }]
                            ]
                        }
                    });
                }
            } catch (error) {
                const status = error.response?.status;
                const message = error.response?.data?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.";
                if (status === 401) {
                    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login`);
                } else {
                    bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
                }
            }
        }
    });
}

module.exports = { startBot };