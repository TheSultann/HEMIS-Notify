// TelegramBot/bot.js

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cron = require('node-cron');

function startBot() {
const token = process.env.TELEGRAM_BOT_TOKEN;
const apiUrl = process.env.MINI_HEMIS_API_URL;
const botApiSecret = process.env.BOT_API_SECRET;

if (!token || !apiUrl || !botApiSecret) {
    console.error('–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
console.log('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
const userStates = {};

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 * @param {Array} schedule - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
 * @param {String} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {String} role - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Date} dateObject - –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 * @returns {String} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
function formatSchedule(schedule, title, role, dateObject) {
    const formattedDate = dateObject.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long'
    });

    if (!schedule || schedule.length === 0) {
        return `<b>${title} (${formattedDate}):</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ`;
    }

    schedule.sort((a, b) => a.time.localeCompare(b.time));

    let message = `<b>${title} (${formattedDate}):</b>\n\n`;
    schedule.forEach(item => {
        message += `üïí <b>${item.time}</b>\n`;
        message += `üìö ${item.subjectId.name}\n`;
        if (item.subjectId.lessonType) {
            message += `üè∑Ô∏è ${item.subjectId.lessonType}\n`;
        }
        if (role === 'teacher') {
            message += `üë• ${item.subjectId.groupName}\n`;
        } else {
            message += `üë§ ${item.subjectId.teacherName}\n`;
        }
        message += `üö™ ${item.subjectId.auditoriumName}\n`;
        message += `--------------------\n`;
    });
    return message;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
 * @param {Number} targetDay - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (1=–ü–Ω, ..., 7=–í—Å).
 * @param {String} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {Date} dateObject - –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã.
 */
async function processAndSendSchedule(targetDay, title, dateObject) {
    console.log(`[${new Date().toLocaleString()}] –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: "${title}"`);
    try {
        const response = await axios.get(`${apiUrl}/api/bot/subscribers`, {
            headers: { 'x-bot-secret': botApiSecret }
        });
        const subscribers = response.data;

        if (subscribers.length === 0) {
            console.log("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
            return;
        }
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribers.length}`);

        for (const subscriber of subscribers) {
            try {
                const scheduleResponse = await axios.get(`${apiUrl}/api/bot/schedule/${subscriber.telegramChatId}`, {
                    headers: { 'x-bot-secret': botApiSecret }
                });
                const fullSchedule = scheduleResponse.data.schedule;
                const daySchedule = fullSchedule.filter(item => item.dayOfWeek === targetDay);
                const message = formatSchedule(daySchedule, title, subscriber.role, dateObject);
                await bot.sendMessage(subscriber.telegramChatId, message, { parse_mode: 'HTML' });
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${title}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.telegramChatId}`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscriber.telegramChatId}:`, error.response?.data?.message || error.message);
            }
        }
        console.log(`–†–∞—Å—Å—ã–ª–∫–∞ "${title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    } catch (error) {
        console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ "${title}":`, error.message);
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫–æ–º–∞–Ω–¥–µ.
 * @param {String} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Number} targetDay - –¶–µ–ª–µ–≤–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
 * @param {String} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {Date} dateObject - –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã.
 */
async function processAndSendScheduleForUser(chatId, targetDay, title, dateObject) {
    try {
        const scheduleResponse = await axios.get(`${apiUrl}/api/bot/schedule/${chatId}`, {
            headers: { 'x-bot-secret': botApiSecret }
        });
        const fullSchedule = scheduleResponse.data.schedule;
        const userRole = scheduleResponse.data.role;
        const daySchedule = fullSchedule.filter(item => item.dayOfWeek === targetDay);
        const message = formatSchedule(daySchedule, title, userRole, dateObject);
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è ${chatId}:`, error.message);
        bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
    }
}

// --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ Cron ---
cron.schedule('0 11 * * *', () => {
    const today = new Date().getDay() || 7;
    const todayDate = new Date();
    processAndSendSchedule(today, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", todayDate);
}, {
    scheduled: true,
    timezone: "Asia/Tashkent"
});
console.log('–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 11:00.');

cron.schedule('0 19 * * *', () => {
    const today = new Date().getDay() || 7;
    if (today === 6) {
        console.log("–°–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –≤–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
        return;
    }
    const tomorrow = (today % 7) + 1;
    const tomorrowDate = new Date();
    tomorrowDate.setDate(tomorrowDate.getDate() + 1);
    processAndSendSchedule(tomorrow, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", tomorrowDate);
}, {
    scheduled: true,
    timezone: "Asia/Tashkent"
});
console.log('–í–µ—á–µ—Ä–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 19:00.');

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId];
    const response = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini-HEMIS –±–æ—Ç! \n\n–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ç—Ä–æ–º (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è) –∏ –≤–µ—á–µ—Ä–æ–º (–Ω–∞ –∑–∞–≤—Ç—Ä–∞).\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.";
    bot.sendMessage(chatId, response);
});

bot.onText(/\/login/, (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { state: 'awaiting_hemis_login' };
    bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã HEMIS (–æ–±—ã—á–Ω–æ —ç—Ç–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞):");
});

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/login - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç HEMIS
/schedule_today - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/schedule_tomorrow - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;

    bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
});

bot.onText(/\/schedule_today/, (msg) => {
    bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...");
    const today = new Date().getDay() || 7;
    const todayDate = new Date();
    processAndSendScheduleForUser(msg.chat.id, today, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", todayDate);
});

bot.onText(/\/schedule_tomorrow/, (msg) => {
    bot.sendMessage(msg.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...");
    const today = new Date().getDay() || 7;
    const tomorrow = (today % 7) + 1;
    const tomorrowDate = new Date();
    tomorrowDate.setDate(tomorrowDate.getDate() + 1);
    processAndSendScheduleForUser(msg.chat.id, tomorrow, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", tomorrowDate);
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏–Ω–∞ ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    if (text.startsWith('/')) return;
    const currentState = userStates[chatId];
    if (!currentState) return;

    if (currentState.state === 'awaiting_hemis_login') {
        currentState.hemisLogin = text;
        currentState.state = 'awaiting_hemis_password';
        bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç HEMIS. \n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.");
    }
    else if (currentState.state === 'awaiting_hemis_password') {
        const hemisLogin = currentState.hemisLogin;
        const hemisPassword = text;
        delete userStates[chatId];
        bot.deleteMessage(chatId, msg.message_id).catch(err => console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."));
        bot.sendMessage(chatId, "–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –≤ HEMIS, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...");

        try {
            const response = await axios.post(`${apiUrl}/api/bot/register`, {
                hemisLogin,
                hemisPassword,
                chatId: chatId.toString()
            }, { headers: { 'x-bot-secret': botApiSecret } });

            if (response.data.success) {
                bot.sendMessage(chatId, `‚úÖ ${response.data.message}`);
            }
        } catch (error) {
            const status = error.response?.status;
            const message = error.response?.data?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.";
            if (status === 401) {
                bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login`);
            } else {
                bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
            }
        }
    }
});}
module.exports = { startBot };