// TelegramBot/bot.js

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cron = require('node-cron');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const token = process.env.TELEGRAM_BOT_TOKEN;
const apiUrl = process.env.MINI_HEMIS_API_URL;
const botApiSecret = process.env.BOT_API_SECRET;

if (!token || !apiUrl || !botApiSecret) {
    console.error('–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (.env)!');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
console.log('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
const userStates = {};

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 * @param {Array} schedule - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
 * @returns {String} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
function formatSchedule(schedule) {
    if (!schedule || schedule.length === 0) {
        return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ";
    }
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    schedule.sort((a, b) => a.time.localeCompare(b.time));

    let message = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n";
    schedule.forEach(item => {
        message += `üïí <b>${item.time}</b>\n`;
        message += `üìö ${item.subjectId.name}\n`;
        message += `üë§ ${item.subjectId.teacherId.name}\n`;
        message += `--------------------\n`;
    });
    return message;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
 */
async function sendDailySchedule() {
    console.log(`[${new Date().toLocaleString()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...`);
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chatId –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
        const response = await axios.get(`${apiUrl}/api/bot/subscribers`, {
            headers: { 'x-bot-secret': botApiSecret }
        });
        const chatIds = response.data;

        if (chatIds.length === 0) {
            console.log("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
            return;
        }
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${chatIds.length}`);

        // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        for (const chatId of chatIds) {
            try {
                const scheduleResponse = await axios.get(`${apiUrl}/api/bot/schedule/${chatId}`, {
                    headers: { 'x-bot-secret': botApiSecret }
                });
                const fullSchedule = scheduleResponse.data;

                // 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
                const today = new Date().getDay() || 7; // 1 (–ü–Ω) - 7 (–í—Å)
                const todaySchedule = fullSchedule.filter(item => item.dayOfWeek === today);

                // 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const message = formatSchedule(todaySchedule);
                await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
                console.log(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);

            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, error.response?.data?.message || error.message);
                // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                // await bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ.");
            }
        }
        console.log("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:", error.response?.data?.message || error.message);
    }
}


// --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Cron ---
// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é sendDailySchedule() –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 —É—Ç—Ä–∞.
// –§–æ—Ä–º–∞—Ç: '–º–∏–Ω—É—Ç–∞ —á–∞—Å * * –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏'
cron.schedule('00 11 * * *', () => {
    sendDailySchedule();
}, {
    scheduled: true,
    timezone: "Asia/Tashkent" // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
});

console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 7:00 AM (Asia/Tashkent).');


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–ª–æ–≥–∏–Ω –∏ —Å—Ç–∞—Ä—Ç) ---
// –≠—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId];
    const response = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini-HEMIS –±–æ—Ç! \n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /login";
    bot.sendMessage(chatId, response);
});

bot.onText(/\/login/, (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { state: 'awaiting_email' };
    bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Mini-HEMIS:");
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.onText(/\/testschedule/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...");
    // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –æ–Ω–∞ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
    sendDailyScheduleForUser(chatId);
});

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–º—É —é–∑–µ—Ä—É
async function sendDailyScheduleForUser(chatId) {
    try {
        const scheduleResponse = await axios.get(`${apiUrl}/api/bot/schedule/${chatId}`, {
            headers: { 'x-bot-secret': botApiSecret }
        });
        const fullSchedule = scheduleResponse.data;
        const today = new Date().getDay() || 7;
        const todaySchedule = fullSchedule.filter(item => item.dayOfWeek === today);
        const message = formatSchedule(todaySchedule);
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è ${chatId}:`, error.message);
        bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
    }
}


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    if (text.startsWith('/')) return;
    const currentState = userStates[chatId];
    if (!currentState) return;

    if (currentState.state === 'awaiting_email') {
        currentState.email = text;
        currentState.state = 'awaiting_password';
        bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å. \n\n‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.");
    } else if (currentState.state === 'awaiting_password') {
        const email = currentState.email;
        const password = text;
        delete userStates[chatId];
        bot.deleteMessage(chatId, msg.message_id).catch(err => console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."));

        try {
            const response = await axios.post(`${apiUrl}/api/bot/link-account`, { email, password, chatId: chatId.toString() }, { headers: { 'x-bot-secret': botApiSecret } });
            if (response.data.success) {
                bot.sendMessage(chatId, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
            }
        } catch (error) {
            const status = error.response?.status;
            const message = error.response?.data?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.";
            if (status === 401) bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login");
            else if (status === 409) bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${message}`);
            else bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
        }
    }
});