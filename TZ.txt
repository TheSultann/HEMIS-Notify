Техническое Задание (Актуальная версия): Проект "HEMIS-Notify"
1. Название проекта
HEMIS-Notify

2. Цель проекта
Создать API-сервис (бэкенд), который подключается к информационной системе университета (HEMIS) для получения данных студента. На основе этого API реализован Telegram-бот, который автоматически отправляет пользователям их точное ежедневное расписание.

3. Технологический стек
Бэкенд: Node.js, Express.js
База данных: MongoDB (с использованием Mongoose)
Telegram Бот:
node-telegram-bot-api для взаимодействия с Telegram API.
node-cron для планирования ежедневных задач.
axios для взаимодействия с собственным API-сервисом.

4. Архитектура проекта
Проект состоит из двух независимых, но взаимосвязанных модулей: Backend и TelegramBot.
Backend (API-сервис):
server.js: Главный файл для запуска Express-сервера.
models/User.js: Схема Mongoose для пользователя. Поле telegramChatId имеет sparse индекс для корректной обработки уникальности.
routes/schedule.js: Логика получения данных из HEMIS. Отвечает за аутентификацию и запрос полного расписания на семестр.
routes/bot.js: Предоставляет защищенные эндпоинты для Telegram-бота (привязка и перепривязка аккаунта, получение расписания по chatId).
TelegramBot (Сервис уведомлений):
bot.js: Основной файл, содержащий всю логику бота: обработка команд, ведение диалога, планировщик рассылки и функции для запросов к Backend API.
.env: Файл для хранения токенов и секретных ключей.

5. Ключевая логика работы
Логика API-сервиса (Бэкенд):
Привязка аккаунта: Пользователь привязывает свой Telegram-аккаунт к профилю HEMIS. Система ищет пользователя по telegramChatId, что позволяет одному и тому же человеку в Telegram переключать аккаунты HEMIS, обновляя существующую запись.
Аутентификация в HEMIS: Бэкенд получает hemisToken от API университета.
Автоматическое определение семестра: Бэкенд обращается к эндпоинту /v1/account/me для автоматического получения кода текущего семестра студента.
Запрос расписания: Бэкенд запрашивает у HEMIS расписание на весь семестр, не указывая конкретную неделю. Он передает боту полный, нефильтрованный список занятий, каждое из которых содержит точную дату (lesson_date).
Универсальность и отказоустойчивость: При получении данных профиля студента, бэкенд безопасно обрабатывает отсутствие необязательных полей (например, названия группы), что обеспечивает стабильную работу для всех пользователей.
Ре-аутентификация: При ошибке 401 (устаревший токен) бэкенд автоматически получает новый hemisToken и повторяет запрос.
Логика Telegram-бота:
Привязка аккаунта: Пользователь отправляет команду /login. Бот запрашивает логин и пароль от HEMIS и отправляет их на эндпоинт /api/bot/register.
Ежедневная автоматическая рассылка:
Каждый день в 7:00 (расписание на сегодня) и в 19:00 (расписание на завтра) node-cron запускает задачу.
Бот запрашивает у бэкенда список всех подписчиков (/api/bot/subscribers).
Для каждого chatId бот запрашивает его полное расписание на семестр (/api/bot/schedule/:chatId).
Ключевая логика: Бот фильтрует полученный список, оставляя только те занятия, у которых lesson_date (календарная дата) точно совпадает с целевым днем. Это гарантирует 100% точность расписания.
Отформатированное сообщение отправляется пользователю.

6. Статус проекта и решенные задачи
Проект полностью функционален. Устранены критические ошибки, связанные с обработкой данных разных студенческих групп и регистрацией новых пользователей, что сделало систему универсальной и стабильной.

7. Следующие шаги
Определяются пользователем.

8. Ключевые файлы проекта
Backend/routes/schedule.js (логика получения расписания)
Backend/routes/bot.js (API для бота)
Backend/models/User.js (схема данных пользователя)
TelegramBot/bot.js (вся логика Telegram-бота и планировщика)